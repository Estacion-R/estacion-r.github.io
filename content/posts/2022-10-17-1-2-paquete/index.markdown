---
title: ¬°1, 2... paquete!
description: "Agradecimientos profundos para Yanina Bellini Saibene y Federico Baraghian por su lectura, devoluci√≥n y aportes!"
author: 'Pablo Tiscornia'
date: '2022-10-24'
slug: 1-2-paquete
categories:
  - rstatsES
  - documentacion
  - desarrollo de paquetes
tags:
  - rstats
  - rstatES
  - paquetes
  - packages
  - development
  - desarrollo
toc: no
images: ~
---


<style type="text/css">
@import url(https://fonts.googleapis.com/css?family=Glegoo);

.showMore{
  font-size: 14px;
  display:block;
  cursor: pointer;
  
}
.showMore + input{
  display:none;
}
.showMore + input + *{
  display:none;
}
.showMore + input:checked + *{
  display:block;
    
}

blockquote {
  margin-left: 0;
  font-size: 12px;
  background: #e5f5f9;
}
</style>

Si ten√©s m√°s de 30 a√±os (y viv√≠s o viviste en Argentina) probablemente hayas conocido los postres 1,2, LISTO! Para quienes no lo conozcan, la idea era muy simple: En apenas dos pasos, como mucho tres, pod√≠as pasar de tener un sobre en la mano a un postre en una taza (¬°y rico!). Los pasos, adem√°s, eran muy sencillos: Abrir el sobre, volcar el contenido del sobre en una taza, mezclar con leche y... ¬°listo! a disfrutar. 

<img src="http://k30.kn3.net/taringa/A/6/0/A/7/1/LeandroD17/C3C.jpg" style="display: block; margin: auto;" />


Como en el postre, en este post voy a tratar de mostrar c√≥mo en pocos pasos podemos pasar de tener un mont√≥n de funciones desperdigadas por despelotados scripts a un paquete de R que las contenga. Como se imaginar√°n, no ser√°n dos (o tres), pero s√≠ mostrar√© c√≥mo se puede hacer de forma sencilla y efectiva, sin necesidad de entender todo lo que est√° pasando por detr√°s.

## ¬øPor qu√© un paquete?

Podemos pensar al camino del o la programadora en R como aquel que (puede) transita(r) por las siguientes etapas, no necesariamente de forma ordenada ni sin caos, ansiedad, frustraci√≥n pero tambi√©n con aciertos y, cada tanto, algunas victorias:

1. **La Era del script.** Podemos considerarla como la instancia con la que nos incorporamos al lenguaje. En este punto nos encontramos escribiendo un sinf√≠n de secuencias de c√≥digo con mucha repetici√≥n, probablemente poca automatizaci√≥n, o con alguna m√°s bien r√∫stica y no sistem√°tica.

1. **La Era de la funci√≥n.** En nuestros scripts empezamos a necesitar no repetir tanto (porque lo hacemos mucho). Nos cuentan que existen las funciones, las vemos como algo maravilloso y al mismo tiempo doloroso de construir. Pero cuando le agarramos la mano no podemos parar.

1. **La era del paquete.** Nos empezamos a cansar de ir a buscar funciones por proyectos mal organizados, hechos ad hoc para algo en particular y que ya no recordamos bien en qu√© carpeta lo dejamos, o siquiera si era ese el proyecto en el que hab√≠amos escrito la funci√≥n. Los paquetes ya eran algo que escuch√°bamos hablar, pero eso es para gente que trabaja en la NASA, no estamos a la altura.

Este post tiene como objetivo aquellas personas que est√°n transitando la tercera etapa, por dos razones m√°s que nada:

a. saben escribir funciones (r√∫sticas, no sofisticadas, pero funciones al fin), y

b. necesitan armar un paquete


## Bibliograf√≠a de referencia

Me voy a basar en la documentaci√≥n [R Packages (2e)](https://r-pkgs.org/data.html) cuyos autores son [Jennifer Bryan](https://jennybryan.org/) y [Hadley Wickham](https://hadley.nz/). Este libro est√° disponible y accesible de forma gratuita en internet. Est√° escrito s√≥lo en ingl√©s, pero en uno muy sencillo y ameno, f√°cil de digerir[^1]. 

[^1]: Ambos autores tienen una inclinaci√≥n por poner el foco en la accesibilidad a la hora de transmitir conocimiento, cosa para nada despreciable en el mundo de la programaci√≥n.


## Manos a la obra

Voy a mostrar los m√≠nimos pasos necesarios para armar un paquete y para ello voy a... ¬°armar un paquete! La idea es no quedarnos en lo expositivo, sino que se pueda replicar (y adaptar) el ejemplo. Para ello vamos a trabajar en Rstudio[^2], siendo de las plataformas m√°s populares para escribir en R. La idea es simplemente abrir el programa y en un R script ir escribiendo el c√≥digo necesario que iremos dejando a continuaci√≥n. No es necesario que guardes este script, aunque puedes hacerlo para dejar asentado los pasos recorridos.

[^2]: 

### Librer√≠as de trabajo

Para armar nuestro paquete necesitaremos de las siguientes librer√≠as, las cuales nos van a proveer de funciones para facilitar el desarrollo del paquete.


```r
library(devtools)
library(usethis)
```


**Paso 1, crear el paquete**. Lo primero que vamos a hacer es ponerle un nombre a nuestro paquete, el cual se llamara `{risas}`.
Luego vamos a crearlo con la siguiente funci√≥n (aseg√∫rate de poner la ruta que quieras para alojar el paquete en tu computadora):


```r
usethis::create_package("risas")
```

Como resultado vas a poder ver que se te ha creado un proyecto nuevo con el nombre del paquete y una estructura de archivos como la de esta imagen:


![](img/carpetas_paquete.png)



<blockquote>
  <label class="showMore" for="_1"> üëÜüèºÔ∏è En pocas palabras</label>
  <input id="_1" type="checkbox">
  <div>
  
  - la **carpeta R** va a contener el conjunto de funciones creadas. 
  
  - **DESCRIPTION** provee la metadata (data sobre la data) del paquete
  
  - **.Rbuildignore** lista los archivos que vamos a necesitar pero que no se incluir√°n cuando armemos el paquete
  
  - **risas.Rproj** es el archivo del proyecto creado
  
  - **.gitignore** contiene aquellos archivos que no queremos que interactuen con Github[^3]
  
  - **NAMESPACE** declara aquellas funciones que nuestro paquete declara para uso externo y aquellas funciones externas que nuestro paquete importa.</div>
</blockquote>


[^3]: Otro post sobre Github ya se encuentra en producci√≥n


**Paso 2, armar las funciones (o adaptar las que ya tenemos hechas).** Aqu√≠ es donde debemos ir a buscar esas funciones que dieron la raz√≥n de ser del paquete. El destino de esas funciones es la carpeta `R` que se creo autom√°ticamente al comienzo. En principio la idea es que tengamos un R script por cada funci√≥n, luego podemos agrupar m√°s de una por script, pero al principio es m√°s prolijo e intuitivo arrancar por la primera versi√≥n.

La funci√≥n que nos va a asistir en este paso es `usethis::use_r("nombre_de_la_funcion")` (en el par√©ntesis indicamos el nombre de la funci√≥n). Al ejecutarla pasar√°n dos cosas: (1) se crear√° autom√°ticamente el archivo .R, directo en la carpeta R y (2) se abrir√° el mismo para ya definir el contenido de la funci√≥n. Por ejemplo:


```r
usethis::use_r("risa_ja")
```

Una vez en el R script, defino el contenido de la funci√≥n (notar que el nombre del script y el nombre de la funci√≥n son iguales) y guardo el archivo:


```r
risa_ja <- function(){

  print("jajajajajaja")

}
```

**Paso 3, cargar y chequear.** Una vez que defin√≠ mi funci√≥n debo proceder a "cargarla" en el ambiente y luego correr nuestro primer _chequeo_ para ver si est√° todo bien con lo que hicimos hasta el momento. Las funciones que nos asistir√°n en este paso son `devtools::load_all()` para cargar la o las funciones que creamos (es como correr un `library()` pero de un paquete que a√∫n no esta instalado) y `devtools::check()` para el chequeo. 

Al correr el `check()` deber√≠amos ver algo as√≠:

![](img/paquete_check.gif)

Lo importante de este paso es revisar el √∫ltimo mensaje, que de salir todo bien deber√≠a figurar algo as√≠:

![](img/paquete_check_resultado.png)

Por suerte la explicaci√≥n de estos tres bloques (_errors_, _warning_ y _note_) es bastante intuitiva. Lo que m√°s nos importa es que <span style="color:green"> `errors`</span> figure en cero. De no ser as√≠ es lo primero que deber√≠amos revisar. Por suerte, inmediatamente arriba de este √∫ltimo mensaje tenemos m√°s pistas sobre qu√© es lo que encontr√≥ el  `check()` como para que aparezca, por ejemplo, un <span style="color:red"> `1 warning`</span> (en este caso, falta darle una licencia al paquete, cosa que haremos en los pr√≥ximos pasos). Vale decir que a√∫n con `warnings` y `notes` podemos avanzar, aunque no es lo recomendable. 

**Paso 4, darle una licencia al paquete.** Aqu√≠ no profundizaremos mucho ya que el paso es bien sencillo y lo que puede tomar m√°s tiempo es decidir por qu√© tipo de licencia optar. En nuestro caso vamos a ir por GPL-3[^4]

[^4]: M√°s informaci√≥n sobre la licencia GPLv3, aqu√≠: https://www.gnu.org/licenses/gpl-3.0.en.html

La funci√≥n que debemos para cumplir con este paso es:


```r
usethis::use_gpl3_license()
```

Con ella se crear√° un nuevo archivo en la carpeta del proyecto llamado `LICENSE.md`.

**Paso 5, documentaci√≥n del paquete.** Esta es una de las razones por las cuales es buena idea hacer un paquete, la posibilidad de documentar; actividad cuya popularidad es inversamente proporcional a la importancia que tiene. ¬øPor qu√© documentar? Puede haber varias respuestas, pero la m√°s palpable puede ser que la documentaci√≥n nos ahorra dolores de cabeza (a nosotros/as o a otros/as). Una funci√≥n puede ser intuitiva para quien la dise√±a (o no!), pero al retomar su uso despu√©s de un tiempo podemos no tener claro c√≥mo es que se usaba, los par√°metros que tiene y el resultado que genera. **Para ello es clave la documentaci√≥n**, porque es justamente eso lo que resolvemos, dejar en claro lo que hace una funci√≥n y la forma de utilizarla para llegar a ese resultado.

Vale mencionar que debemos diferenciar entre documentar una funci√≥n y documentar un paquete, van a ser dos pasos diferentes. Veamos el primero.

**Documentar una funci√≥n.** Lo que vamos a hacer es lo siguiente: en el mismo R script donde definimos nuestra nueva funci√≥n (`risa_ja()`) vamos a pararnos en la primera l√≠nea y dirigirnos a la ventana de Rstudio ***Code --> Insert Roxygen sckeleton***: 

![](img/paquete_funcion_doc.gif)

Hecho esto, Rstudio automaticamente agregar al menos 6 l√≠neas de c√≥digo que servir√°n para documentar lo b√°sico de nuestra funci√≥n (nombre, descripci√≥n, par√°metros -si los hay-, ejemplo de uso, eso al menos para empezar).
En nuestro caso, deber√≠a quedar algo as√≠:


```r
#' risa_ja
#' @description Funci√≥n que genera una carcajada
#' @return
#' @export
#'
#' @examples
#' risa_ja()
risa_ja <- function(){

  print("jajajajajaja")

}
```



**Spoiler alert**

Al final del camino, cuando consultemos por la ayuda de la funci√≥n deber√≠amos ver algo as√≠:
![](img/spoiler_help.png)


Una vez que completamos estos campos, corremos la funci√≥n `devtools::document()`. Con ella se va a crear una carpeta llamada **man** en donde se ir√°n listando archivos `.md` que contienen esta documentaci√≥n que completamos, uno por cada funci√≥n que tengamos en cada R.script.


```r
devtools::document()
```

Por otro lado se va a actualizar el archivo que ya exist√≠a llamado **NAMESPACE**, donde se ir√°n listando las funciones que creamos. Importante, no editar estos archivos a mano! esa tarea se la vamos a dejar al `document()`.


**Paso 6, chequear que est√© todo bien e... instalar el paquete! (estamos cerca!).** Nuevamente vamos a correr el `devtools::check()` (como habr√°s notado, es muy importante chequear), y revisar que con lo nuevo que hemos corrido estemos bien encaminados/as para lo que tan ansiadamente queremos hacer: instalar el paquete en nuestras computadoras!

Si todo sale bien, nuestro nuevo `check()` deber√≠a verse as√≠:

![](img/paquete_check_v2.png)
![](https://media.tenor.com/qdg13PqYbxMAAAAM/yes-baby.gif)

Si todo no sale tan bien (alguna nota, error o advertencia), podemos revisar el cap√≠tulo [**R CMD check**](https://r-pkgs.org/check.html) del libro y revisar qu√© puede estar pasando.

No demoremos m√°s, antes de que alguien se arrepienta, instalemos nuestro paquete ejecutando la siguiente sentencia en nuestras consolas:


```r
devtools::install()
```

Una vez hecho esto, nuestro paquete ya se encuentra instalado en la computadora y disponible para ser convocado v√≠a el cl√°sico `library()`. Y la mejor manera de comprobarlo es... prob√°ndolo!

Veamos c√≥mo al comenzar a escribirlo en un `library()` Rstudio lo sugiere como autocompletado:

![](img/paquete_libreria.png)

### √âxito.

Hemos logrado sin grandes sobresaltos armar nuestro primer paquete. Esta es una gu√≠a m√≠nima de c√≥mo hacerlo, hay muuuuucho m√°s al respecto. Si te interesa invito nuevamente a que pases por el libro [R Packages (2e)](https://r-pkgs.org/data.html). Aunque en ingl√©s, es de la mejor documentaci√≥n para el armado de paquetes.

Va tambi√©n, de forma resumida, c√≥mo podr√≠as seguir avanzando de cara a futuro:

- Vincular este flujo de trabajo con GIT y Github. Esto te permitir√≠a dejar disponible a tu nuevo paquete en un repositorio para que otras personas tambi√©n puedan descarg√°rselo. No inclu√≠ esto ya que la intenci√≥n era concentrarnos en el armado de una versi√≥n m√≠nima, esquivando la aventura que es adentrarse en Github (aventura m√°s que recomendada por cierto!).

- Armar _tests_ de tus funciones. Esto ayuda a la robustez de tu desarrollo, comprobando de diferentes formas que tu funci√≥n hace lo que se espera que haga (a veces las cosas funcionan pero no como uno quiere!). Prob√° jugar con `usethis::use_testthat()`, luego `usethis::use_test()` para finalizar con `devtools::test()`, a ver qu√© pasa!. [Ac√° te dejo la referencia en el libro que trata este tema](https://r-pkgs.org/testing-basics.html)

- ¬øUsas otros paquetes para armar tu funci√≥n? Prob√° con `usethis::use_package()` para dejar asentado esto en la estructura de tu desarrollo. [Ac√° un poco m√°s del tema](https://r-pkgs.org/dependencies.html)

- ¬øVas a sumar una nueva funci√≥n? Este ser√≠a el ciclo a seguir en un paquete ya creado:

1. Sum√° la funci√≥n con `usethis::use_r("nombre_de_la_funcion")`
1. Document√° la funci√≥n con el esqueleto de Roxygen
1. Carg√° el nuevo estado del paquete con `devtools::load_all()`
1. Document√° en el paquete la nueva funci√≥n con `devtools::document()`
1. Cheque√° que est√© todo bien con `devtools::check()`
1. Instal√° la nueva versi√≥n de tu paquete con la nueva funci√≥n! --> `devtools::install()`


Eso es todo, espero que haya sido ameno y, sobre todo, ¬°√∫til! Cualquier comentario o duda pod√©s dejarlo por ac√° o escribirme por alguna de las redes sociales sin problema.


<script defer src="https://cdn.commento.io/js/commento.js"></script>
<div id="commento"></div>
